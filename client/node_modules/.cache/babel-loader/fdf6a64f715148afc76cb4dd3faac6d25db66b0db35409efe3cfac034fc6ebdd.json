{"ast":null,"code":"const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*\\.\\w{2,}$/;\nexport const validateEmail = email => {\n  if (!email) return 'Email is required';\n  if (!emailRegex.test(email)) return 'Invalid email format';\n  return '';\n};\nexport const validateItemForm = formData => {\n  var _formData$title, _formData$description, _formData$location;\n  const errors = {};\n  if (!((_formData$title = formData.title) !== null && _formData$title !== void 0 && _formData$title.trim())) {\n    errors.title = 'Title is required';\n  } else if (formData.title.length > 100) {\n    errors.title = 'Title must be less than 100 characters';\n  }\n  if (!((_formData$description = formData.description) !== null && _formData$description !== void 0 && _formData$description.trim())) {\n    errors.description = 'Description is required';\n  } else if (formData.description.length > 1000) {\n    errors.description = 'Description must be less than 1000 characters';\n  }\n  if (!formData.type) {\n    errors.type = 'Type is required';\n  }\n  if (!formData.category) {\n    errors.category = 'Category is required';\n  }\n  if (!((_formData$location = formData.location) !== null && _formData$location !== void 0 && _formData$location.trim())) {\n    errors.location = 'Location is required';\n  }\n  if (!formData.date) {\n    errors.date = 'Date is required';\n  }\n  return errors;\n};\nexport const validateClaimForm = formData => {\n  var _formData$description2;\n  const errors = {};\n  if (!((_formData$description2 = formData.description) !== null && _formData$description2 !== void 0 && _formData$description2.trim())) {\n    errors.description = 'Description is required';\n  } else if (formData.description.length > 1000) {\n    errors.description = 'Description must be less than 1000 characters';\n  }\n  return errors;\n};\nexport const validateFileSize = (file, maxSizeMB = 5) => {\n  const maxSize = maxSizeMB * 1024 * 1024; // Convert to bytes\n  return file.size <= maxSize;\n};\nexport const validateFileType = file => {\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  return allowedTypes.includes(file.type);\n};","map":{"version":3,"names":["emailRegex","validateEmail","email","test","validateItemForm","formData","_formData$title","_formData$description","_formData$location","errors","title","trim","length","description","type","category","location","date","validateClaimForm","_formData$description2","validateFileSize","file","maxSizeMB","maxSize","size","validateFileType","allowedTypes","includes"],"sources":["C:/Users/Dell/Desktop/klh-lost-and-found/client/src/utils/validators.js"],"sourcesContent":["const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*\\.\\w{2,}$/;\r\n\r\nexport const validateEmail = (email) => {\r\n  if (!email) return 'Email is required';\r\n  if (!emailRegex.test(email)) return 'Invalid email format';\r\n  return '';\r\n};\r\n\r\nexport const validateItemForm = (formData) => {\r\n  const errors = {};\r\n\r\n  if (!formData.title?.trim()) {\r\n    errors.title = 'Title is required';\r\n  } else if (formData.title.length > 100) {\r\n    errors.title = 'Title must be less than 100 characters';\r\n  }\r\n\r\n  if (!formData.description?.trim()) {\r\n    errors.description = 'Description is required';\r\n  } else if (formData.description.length > 1000) {\r\n    errors.description = 'Description must be less than 1000 characters';\r\n  }\r\n\r\n  if (!formData.type) {\r\n    errors.type = 'Type is required';\r\n  }\r\n\r\n  if (!formData.category) {\r\n    errors.category = 'Category is required';\r\n  }\r\n\r\n  if (!formData.location?.trim()) {\r\n    errors.location = 'Location is required';\r\n  }\r\n\r\n  if (!formData.date) {\r\n    errors.date = 'Date is required';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const validateClaimForm = (formData) => {\r\n  const errors = {};\r\n\r\n  if (!formData.description?.trim()) {\r\n    errors.description = 'Description is required';\r\n  } else if (formData.description.length > 1000) {\r\n    errors.description = 'Description must be less than 1000 characters';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const validateFileSize = (file, maxSizeMB = 5) => {\r\n  const maxSize = maxSizeMB * 1024 * 1024; // Convert to bytes\r\n  return file.size <= maxSize;\r\n};\r\n\r\nexport const validateFileType = (file) => {\r\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\n  return allowedTypes.includes(file.type);\r\n};"],"mappings":"AAAA,MAAMA,UAAU,GAAG,yCAAyC;AAE5D,OAAO,MAAMC,aAAa,GAAIC,KAAK,IAAK;EACtC,IAAI,CAACA,KAAK,EAAE,OAAO,mBAAmB;EACtC,IAAI,CAACF,UAAU,CAACG,IAAI,CAACD,KAAK,CAAC,EAAE,OAAO,sBAAsB;EAC1D,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,QAAQ,IAAK;EAAA,IAAAC,eAAA,EAAAC,qBAAA,EAAAC,kBAAA;EAC5C,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,GAAAH,eAAA,GAACD,QAAQ,CAACK,KAAK,cAAAJ,eAAA,eAAdA,eAAA,CAAgBK,IAAI,CAAC,CAAC,GAAE;IAC3BF,MAAM,CAACC,KAAK,GAAG,mBAAmB;EACpC,CAAC,MAAM,IAAIL,QAAQ,CAACK,KAAK,CAACE,MAAM,GAAG,GAAG,EAAE;IACtCH,MAAM,CAACC,KAAK,GAAG,wCAAwC;EACzD;EAEA,IAAI,GAAAH,qBAAA,GAACF,QAAQ,CAACQ,WAAW,cAAAN,qBAAA,eAApBA,qBAAA,CAAsBI,IAAI,CAAC,CAAC,GAAE;IACjCF,MAAM,CAACI,WAAW,GAAG,yBAAyB;EAChD,CAAC,MAAM,IAAIR,QAAQ,CAACQ,WAAW,CAACD,MAAM,GAAG,IAAI,EAAE;IAC7CH,MAAM,CAACI,WAAW,GAAG,+CAA+C;EACtE;EAEA,IAAI,CAACR,QAAQ,CAACS,IAAI,EAAE;IAClBL,MAAM,CAACK,IAAI,GAAG,kBAAkB;EAClC;EAEA,IAAI,CAACT,QAAQ,CAACU,QAAQ,EAAE;IACtBN,MAAM,CAACM,QAAQ,GAAG,sBAAsB;EAC1C;EAEA,IAAI,GAAAP,kBAAA,GAACH,QAAQ,CAACW,QAAQ,cAAAR,kBAAA,eAAjBA,kBAAA,CAAmBG,IAAI,CAAC,CAAC,GAAE;IAC9BF,MAAM,CAACO,QAAQ,GAAG,sBAAsB;EAC1C;EAEA,IAAI,CAACX,QAAQ,CAACY,IAAI,EAAE;IAClBR,MAAM,CAACQ,IAAI,GAAG,kBAAkB;EAClC;EAEA,OAAOR,MAAM;AACf,CAAC;AAED,OAAO,MAAMS,iBAAiB,GAAIb,QAAQ,IAAK;EAAA,IAAAc,sBAAA;EAC7C,MAAMV,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,GAAAU,sBAAA,GAACd,QAAQ,CAACQ,WAAW,cAAAM,sBAAA,eAApBA,sBAAA,CAAsBR,IAAI,CAAC,CAAC,GAAE;IACjCF,MAAM,CAACI,WAAW,GAAG,yBAAyB;EAChD,CAAC,MAAM,IAAIR,QAAQ,CAACQ,WAAW,CAACD,MAAM,GAAG,IAAI,EAAE;IAC7CH,MAAM,CAACI,WAAW,GAAG,+CAA+C;EACtE;EAEA,OAAOJ,MAAM;AACf,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,CAAC,KAAK;EACvD,MAAMC,OAAO,GAAGD,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;EACzC,OAAOD,IAAI,CAACG,IAAI,IAAID,OAAO;AAC7B,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIJ,IAAI,IAAK;EACxC,MAAMK,YAAY,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;EAC3E,OAAOA,YAAY,CAACC,QAAQ,CAACN,IAAI,CAACP,IAAI,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}