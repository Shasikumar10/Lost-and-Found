{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport toast from 'react-hot-toast';\nconst SOCKET_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const useSocket = token => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    if (!token) return;\n    const newSocket = io(SOCKET_URL, {\n      auth: {\n        token\n      }\n    });\n    newSocket.on('connect', () => {\n      console.log('Socket connected');\n      setConnected(true);\n      newSocket.emit('get_notifications');\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setConnected(false);\n    });\n    newSocket.on('notification', notification => {\n      setNotifications(prev => [notification, ...prev]);\n      toast.success(notification.title, {\n        duration: 4000,\n        icon: 'ðŸ””'\n      });\n    });\n    newSocket.on('notifications', notifs => {\n      setNotifications(notifs);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.close();\n    };\n  }, [token]);\n  const markAsRead = notificationId => {\n    if (socket) {\n      socket.emit('mark_read', notificationId);\n      setNotifications(prev => prev.map(n => n._id === notificationId ? {\n        ...n,\n        isRead: true\n      } : n));\n    }\n  };\n  const markAllAsRead = () => {\n    if (socket) {\n      socket.emit('mark_all_read');\n      setNotifications(prev => prev.map(n => ({\n        ...n,\n        isRead: true\n      })));\n    }\n  };\n  return {\n    socket,\n    connected,\n    notifications,\n    markAsRead,\n    markAllAsRead\n  };\n};\n_s(useSocket, \"7pvZAfNZDlF3iRer2BqTY0TPSMk=\");","map":{"version":3,"names":["useEffect","useState","io","toast","SOCKET_URL","process","env","REACT_APP_API_URL","useSocket","token","_s","socket","setSocket","notifications","setNotifications","connected","setConnected","newSocket","auth","on","console","log","emit","notification","prev","success","title","duration","icon","notifs","close","markAsRead","notificationId","map","n","_id","isRead","markAllAsRead"],"sources":["C:/Users/Dell/Desktop/klh-lost-and-found/client/src/hooks/useSocket.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const useSocket = (token) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const newSocket = io(SOCKET_URL, {\r\n      auth: { token }\r\n    });\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('Socket connected');\r\n      setConnected(true);\r\n      newSocket.emit('get_notifications');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Socket disconnected');\r\n      setConnected(false);\r\n    });\r\n\r\n    newSocket.on('notification', (notification) => {\r\n      setNotifications(prev => [notification, ...prev]);\r\n      toast.success(notification.title, {\r\n        duration: 4000,\r\n        icon: 'ðŸ””'\r\n      });\r\n    });\r\n\r\n    newSocket.on('notifications', (notifs) => {\r\n      setNotifications(notifs);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, [token]);\r\n\r\n  const markAsRead = (notificationId) => {\r\n    if (socket) {\r\n      socket.emit('mark_read', notificationId);\r\n      setNotifications(prev =>\r\n        prev.map(n => n._id === notificationId ? { ...n, isRead: true } : n)\r\n      );\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    if (socket) {\r\n      socket.emit('mark_all_read');\r\n      setNotifications(prev =>\r\n        prev.map(n => ({ ...n, isRead: true }))\r\n      );\r\n    }\r\n  };\r\n\r\n  return {\r\n    socket,\r\n    connected,\r\n    notifications,\r\n    markAsRead,\r\n    markAllAsRead\r\n  };\r\n};"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,KAAK,MAAM,iBAAiB;AAEnC,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE3E,OAAO,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,KAAK,EAAE;IAEZ,MAAMQ,SAAS,GAAGf,EAAE,CAACE,UAAU,EAAE;MAC/Bc,IAAI,EAAE;QAAET;MAAM;IAChB,CAAC,CAAC;IAEFQ,SAAS,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/BL,YAAY,CAAC,IAAI,CAAC;MAClBC,SAAS,CAACK,IAAI,CAAC,mBAAmB,CAAC;IACrC,CAAC,CAAC;IAEFL,SAAS,CAACE,EAAE,CAAC,YAAY,EAAE,MAAM;MAC/BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCL,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;IAEFC,SAAS,CAACE,EAAE,CAAC,cAAc,EAAGI,YAAY,IAAK;MAC7CT,gBAAgB,CAACU,IAAI,IAAI,CAACD,YAAY,EAAE,GAAGC,IAAI,CAAC,CAAC;MACjDrB,KAAK,CAACsB,OAAO,CAACF,YAAY,CAACG,KAAK,EAAE;QAChCC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFX,SAAS,CAACE,EAAE,CAAC,eAAe,EAAGU,MAAM,IAAK;MACxCf,gBAAgB,CAACe,MAAM,CAAC;IAC1B,CAAC,CAAC;IAEFjB,SAAS,CAACK,SAAS,CAAC;IAEpB,OAAO,MAAM;MACXA,SAAS,CAACa,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAACrB,KAAK,CAAC,CAAC;EAEX,MAAMsB,UAAU,GAAIC,cAAc,IAAK;IACrC,IAAIrB,MAAM,EAAE;MACVA,MAAM,CAACW,IAAI,CAAC,WAAW,EAAEU,cAAc,CAAC;MACxClB,gBAAgB,CAACU,IAAI,IACnBA,IAAI,CAACS,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKH,cAAc,GAAG;QAAE,GAAGE,CAAC;QAAEE,MAAM,EAAE;MAAK,CAAC,GAAGF,CAAC,CACrE,CAAC;IACH;EACF,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI1B,MAAM,EAAE;MACVA,MAAM,CAACW,IAAI,CAAC,eAAe,CAAC;MAC5BR,gBAAgB,CAACU,IAAI,IACnBA,IAAI,CAACS,GAAG,CAACC,CAAC,KAAK;QAAE,GAAGA,CAAC;QAAEE,MAAM,EAAE;MAAK,CAAC,CAAC,CACxC,CAAC;IACH;EACF,CAAC;EAED,OAAO;IACLzB,MAAM;IACNI,SAAS;IACTF,aAAa;IACbkB,UAAU;IACVM;EACF,CAAC;AACH,CAAC;AAAC3B,EAAA,CAnEWF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}